"use client";

import { useRef, useState } from "react";
import { useRouter } from "next/navigation";
import { toast } from "sonner";

// ====== Options ======
const TYPES = ["UX/UI", "SEO", "Performance", "Security", "Other"] as const;
const CATEGORIES = [
  "Elementor",
  "Yoast SEO",
  "SSL",
  "Security",
  "Wordfence",
  "Misc.",
] as const;

// ====== Types ======
type Props = {
  defaults?: {
    id?: string;
    name?: string;
    version?: string;
    vendor?: string;
    pluginType?: string;
    category?: string;
    content?: string;
    iconUrl?: string;
    fileUrl?: string;
    recommended?: boolean;
    featured?: boolean;
  };
  actionUrl: string; // `/extensions/plugins/api/create` ‡∏´‡∏£‡∏∑‡∏≠ `/extensions/plugins/api/update`
  redirectTo?: string; // path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redirect ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: "/extensions/plugins")
};

// ====== Helpers ======
function FieldLabel({
  children,
  required,
}: {
  children: React.ReactNode;
  required?: boolean;
}) {
  return (
    <label className="block text-xs font-medium tracking-wide text-white/70 mb-1">
      {children}
      {required && <span className="text-amber-400"> *</span>}
    </label>
  );
}

function Hint({ children }: { children: React.ReactNode }) {
  return <p className="mt-1 text-[11px] text-white/45">{children}</p>;
}

export default function PluginForm({
  defaults,
  actionUrl,
  redirectTo = "/extensions/plugins",
}: Props) {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [dragOver, setDragOver] = useState(false);
  const [pickedFile, setPickedFile] = useState<File | null>(null);
  const [pickedIcon, setPickedIcon] = useState<File | null>(null);
  const [fileUrl, setFileUrl] = useState<string>(defaults?.fileUrl ?? "");
  const [iconUrl, setIconUrl] = useState<string>(defaults?.iconUrl ?? "");
  const [uploadingFile, setUploadingFile] = useState(false);
  const [uploadingIcon, setUploadingIcon] = useState(false);
  const fileRef = useRef<HTMLInputElement>(null);
  const iconRef = useRef<HTMLInputElement>(null);
  const [descLen, setDescLen] = useState(defaults?.content?.length ?? 0);

  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    setLoading(true);
    const form = e.currentTarget;
    const fd = new FormData(form);
    // ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏¥‡∏ö ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô 413 ‡∏ö‡∏ô Vercel Functions
    fd.delete("file");
    fd.delete("icon");
    // ‡∏™‡πà‡∏á URL ‡πÅ‡∏ó‡∏ô
    if (fileUrl) fd.set("fileUrl", fileUrl);
    if (iconUrl) fd.set("iconUrl", iconUrl);

    if (!fileUrl) {
      setLoading(false);
      toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
      return;
    }

    try {
      const res = await fetch(actionUrl, { method: "POST", body: fd });
      const payload = await res.json().catch(() => ({}));
      if (!res.ok || payload?.ok === false) {
        throw new Error(
          payload?.message || payload?.error || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        );
      }
      toast.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ");
      form.reset();
      setPickedFile(null);
      setPickedIcon(null);
      setDescLen(0);

      // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ list ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ list ‡πÅ‡∏™‡∏î‡∏á toast ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ ToastMount ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å searchParam)
      const url = new URL(redirectTo, window.location.origin);
      // ‡πÅ‡∏ô‡∏ö‡∏™‡πÄ‡∏ï‡∏ï‡∏±‡∏™‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÉ‡∏´‡πâ Toaster ‡∏î‡πâ‡∏≤‡∏ô list ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      url.searchParams.set("toast", payload?.status ?? "created"); // created/updated
      // ‡πÅ‡∏ô‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ (optional)
      if (payload?.message) url.searchParams.set("msg", payload.message);

      router.push(url.pathname + "?" + url.searchParams.toString());
      router.refresh(); // ‡πÉ‡∏´‡πâ list ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    } catch (err: any) {
      toast.error(err?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    } finally {
      setLoading(false);
    }
  }

  function onPickFile() {
    fileRef.current?.click();
  }

  function onPickIcon() {
    iconRef.current?.click();
  }

  async function onFileChange(e: React.ChangeEvent<HTMLInputElement>) {
    const f = e.target.files?.[0] || null;
    setPickedFile(f);
    if (!f) return;
    try {
      setUploadingFile(true);
      const url = await uploadToBlob(f);
      setFileUrl(url);
      toast.success("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } catch (err: any) {
      setFileUrl("");
      toast.error(err?.message || "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setUploadingFile(false);
    }
  }

  async function onIconChange(e: React.ChangeEvent<HTMLInputElement>) {
    const f = e.target.files?.[0] || null;
    setPickedIcon(f);
    if (!f) return;
    try {
      setUploadingIcon(true);
      const url = await uploadToBlob(f);
      setIconUrl(url);
      toast.success("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } catch (err: any) {
      setIconUrl("");
      toast.error(err?.message || "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setUploadingIcon(false);
    }
  }

  function onDrop(e: React.DragEvent<HTMLDivElement>) {
    e.preventDefault();
    setDragOver(false);
    const f = e.dataTransfer.files?.[0];
    if (f) setPickedFile(f);
  }

  // ====== Upload Helpers ======
  async function prepareUpload() {
    const res = await fetch("/api/upload/prepare", { method: "POST" });
    if (!res.ok) throw new Error("‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    const j = await res.json();
    if (!j?.url) throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ");
    return j.url as string;
  }

  async function uploadToBlob(file: File) {
    const uploadUrl = await prepareUpload();
    const put = await fetch(uploadUrl, { method: "PUT", body: file });
    if (!put.ok) throw new Error("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    const meta = await put.json().catch(() => ({}));
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á meta.url (‡πÉ‡∏´‡∏°‡πà) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ uploadUrl (‡∏Å‡∏£‡∏ì‡∏µ lib ‡πÉ‡∏´‡πâ URL final)
    return (meta?.url as string) || uploadUrl;
  }

  return (
    <form
      onSubmit={onSubmit}
      className="card mx-auto w-full max-w-4xl rounded-2xl border border-white/10 bg-[rgb(var(--card))]/70 p-5 backdrop-blur"
    >
      {/* Header */}
      <div className="flex flex-col gap-1 sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h2 className="text-base sm:text-lg font-semibold">
            ‡∏™‡∏£‡πâ‡∏≤‡∏á / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Plugin
          </h2>
          <p className="text-xs text-white/50">
            ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
          </p>
        </div>
        <button
          type="submit"
          disabled={loading || uploadingFile || uploadingIcon}
          className="mt-2 sm:mt-0 inline-flex items-center gap-2 rounded-xl px-4 py-2 text-sm text-black bg-gradient-to-r from-yellow-400 via-amber-400 to-yellow-500 hover:brightness-95 disabled:opacity-60"
          aria-label="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Plugin"
        >
          {loading ? (
            <span className="inline-flex items-center gap-2">
              <svg
                className="h-4 w-4 animate-spin"
                viewBox="0 0 24 24"
                aria-hidden
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="3"
                  className="opacity-20"
                ></circle>
                <path
                  d="M22 12a10 10 0 0 1-10 10"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="3"
                  className="opacity-80"
                ></path>
              </svg>
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
            </span>
          ) : (
            "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Plugin"
          )}
        </button>
      </div>

      {/* Divider */}
      <hr className="my-4 border-white/10" />

      {/* Grid 2 cols */}
      <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
        {/* Left column */}
        <section className="grid gap-4">
          <div>
            <FieldLabel required>‡∏ä‡∏∑‡πà‡∏≠</FieldLabel>
            <input
              name="name"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô: Elementor Pro"
              defaultValue={defaults?.name}
              className="w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none transition focus:ring-2 focus:ring-white/10"
              required
            />
            <Hint>‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ List / View</Hint>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div>
              <FieldLabel>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô</FieldLabel>
              <input
                name="version"
                placeholder="1.2.3"
                defaultValue={defaults?.version ?? ""}
                className="w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none transition focus:ring-2 focus:ring-white/10"
              />
              <Hint>‡∏£‡∏∞‡∏ö‡∏∏‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï</Hint>
            </div>
            <div>
              <FieldLabel>‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤ (Vendor)</FieldLabel>
              <input
                name="vendor"
                placeholder="‡πÄ‡∏ä‡πà‡∏ô: Automattic"
                defaultValue={defaults?.vendor ?? ""}
                className="w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none transition focus:ring-2 focus:ring-white/10"
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div>
              <FieldLabel>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (Type)</FieldLabel>
              <select
                name="pluginType"
                defaultValue={defaults?.pluginType ?? "WordPress"}
                className="w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none transition focus:ring-2 focus:ring-white/10"
              >
                {TYPES.map((t) => (
                  <option key={t} value={t} className="bg-[rgb(var(--card))]">
                    {t}
                  </option>
                ))}
              </select>
            </div>
            <div>
              <FieldLabel>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (Category)</FieldLabel>
              <select
                name="category"
                defaultValue={defaults?.category ?? "Misc"}
                className="w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none transition focus:ring-2 focus:ring-white/10"
              >
                {CATEGORIES.map((c) => (
                  <option key={c} value={c} className="bg-[rgb(var(--card))]">
                    {c}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div>
            <FieldLabel>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</FieldLabel>
            <textarea
              name="content"
              placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô"
              defaultValue={defaults?.content ?? ""}
              rows={7}
              onChange={(e) => setDescLen(e.target.value.length)}
              className="w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none transition focus:ring-2 focus:ring-white/10"
            />
            <div className="mt-1 flex items-center justify-between text-[11px] text-white/45">
              <span>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ / HTML ‡∏™‡∏±‡πâ‡∏ô ‡πÜ</span>
              <span>{descLen} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</span>
            </div>
          </div>
        </section>

        {/* Right column */}
        <section className="grid gap-4">
          <div>
            <FieldLabel>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Plugin</FieldLabel>
            <div
              onDragOver={(e) => {
                e.preventDefault();
                setDragOver(true);
              }}
              onDragLeave={() => setDragOver(false)}
              onDrop={onDrop}
              onClick={onPickFile}
              role="button"
              aria-label="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Plugin"
              className={`group rounded-2xl border border-dashed p-6 text-center transition ${
                dragOver
                  ? "border-amber-400 bg-amber-400/10"
                  : "border-white/12 bg-white/[0.06] hover:bg-white/[0.08]"
              }`}
            >
              <input
                ref={fileRef}
                name="file"
                type="file"
                accept=".zip,.tar,.tar.gz,.tgz,.rar,.7z"
                className="hidden"
                onChange={onFileChange}
              />

              <svg
                viewBox="0 0 24 24"
                className="mx-auto mb-3 h-9 w-9 text-white/70 group-hover:text-white"
                aria-hidden
              >
                <path
                  d="M12 16V4m0 0l-3 3m3-3l3 3M5 16v2a3 3 0 003 3h8a3 3 0 003-3v-2"
                  stroke="currentColor"
                  strokeWidth="1.8"
                  fill="none"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>

              {pickedFile ? (
                <div className="grid gap-1">
                  <div className="mx-auto max-w-full truncate rounded-full border border-white/10 bg-white/10 px-3 py-1 text-xs">
                    {pickedFile.name}
                  </div>
                  <span className="text-[11px] text-white/60">
                    {(pickedFile.size / 1024 / 1024).toFixed(2)} MB
                    {uploadingFile ? " ‚Ä¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î..." : fileUrl ? " ‚Ä¢ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß" : ""}
                  </span>
                  <span className="text-[11px] text-white/45">
                    ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                  </span>
                </div>
              ) : (
                <div className="grid gap-0.5">
                  <span className="text-sm font-medium">
                    ‡∏•‡∏≤‡∏Å‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                  </span>
                  <span className="text-[11px] text-white/60">
                    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö .zip, .tar.gz, .rar, .7z
                  </span>
                </div>
              )}
            </div>
            <Hint>‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</Hint>
          </div>

          <div className="rounded-2xl border border-white/10 bg-white/[0.06] p-4 truncate">
            <FieldLabel>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô</FieldLabel>
            <div className="flex items-center gap-4">
              <div className="grid place-items-center size-16 rounded-xl bg-white/10 overflow-hidden">
                {pickedIcon ? (
                  <img
                    src={URL.createObjectURL(pickedIcon)}
                    alt="icon preview"
                    className="h-10 w-10 object-contain"
                    onLoad={(e) =>
                      URL.revokeObjectURL(
                        (e.currentTarget as HTMLImageElement).src
                      )
                    }
                  />
                ) : defaults?.iconUrl ? (
                  // ‡πÅ‡∏™‡∏î‡∏á icon ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô defaults
                  <img
                    src={defaults.iconUrl}
                    alt="current icon"
                    className="h-10 w-10 object-contain"
                  />
                ) : (
                  <svg
                    viewBox="0 0 24 24"
                    className="h-8 w-8 text-white/60"
                    aria-hidden
                  >
                    <path
                      d="M12 5v14M5 12h14"
                      stroke="currentColor"
                      strokeWidth="2"
                      fill="none"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                )}
              </div>

              <div className="flex-1">
                <input
                  ref={iconRef}
                  type="file"
                  name="icon"
                  accept="image/png,image/jpeg,image/webp,image/svg+xml"
                  className="hidden"
                  onChange={onIconChange}
                />
                <div className="flex flex-wrap items-center gap-2">
                  <button
                    type="button"
                    onClick={onPickIcon}
                    className="rounded-lg border border-white/15 bg-white/5 px-3 py-1.5 text-sm hover:bg-white/10"
                  >
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
                  </button>
                  {pickedIcon && (
                    <span className="text-xs rounded-full border border-white/10 bg-white/10 px-2 py-0.5">
                      {pickedIcon.name}
                    </span>
                  )}
                  {pickedIcon && (
                    <button
                      type="button"
                      onClick={() => setPickedIcon(null)}
                      className="text-xs text-white/70 hover:text-white/90 underline"
                    >
                      ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ
                    </button>
                  )}
                </div>
                {uploadingIcon && <p className="text-[11px] text-white/60 mt-1">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô...</p>}
                {!uploadingIcon && iconUrl && <p className="text-[11px] text-emerald-400 mt-1">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>}
                <Hint>
                  ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö PNG / JPG / WEBP / SVG ‚Äî <br /> ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‚â§ 512√ó512
                </Hint>
              </div>
            </div>
          </div>

          <div className="rounded-xl border border-white/10 bg-white/[0.04] p-3 grid grid-cols-2 gap-3">
            <label className="flex items-center gap-2 text-sm">
              <input
                type="checkbox"
                name="recommended"
                defaultChecked={defaults?.recommended}
              />
              ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Recommended)
            </label>
            <label className="flex items-center gap-2 text-sm">
              <input
                type="checkbox"
                name="featured"
                defaultChecked={defaults?.featured}
              />
              ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (Featured)
            </label>
          </div>

          <div className="grid gap-2">
            <FieldLabel>‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</FieldLabel>
            <input
              name="iconUrl"
              placeholder="https://.../icon.png"
              value={iconUrl}
              onChange={(e) => setIconUrl(e.target.value)}
              className="w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none transition focus:ring-2 focus:ring-white/10"
            />
            <FieldLabel>‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô)</FieldLabel>
            <input
              name="fileUrl"
              placeholder="https://.../plugin.zip"
              value={fileUrl}
              onChange={(e) => setFileUrl(e.target.value)}
              className="w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 outline-none transition focus:ring-2 focus:ring-white/10"
            />
          </div>
        </section>
      </div>

      {/* Footer */}
      <div className="mt-5 flex justify-end">
        <button
          type="submit"
          disabled={loading || uploadingFile || uploadingIcon}
          className="inline-flex items-center gap-2 rounded-xl px-4 py-2 text-sm text-black bg-gradient-to-r from-yellow-400 via-amber-400 to-yellow-500 hover:brightness-95 disabled:opacity-60"
        >
          {loading ? (
            <span className="inline-flex items-center gap-2">
              <svg
                className="h-4 w-4 animate-spin"
                viewBox="0 0 24 24"
                aria-hidden
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="3"
                  className="opacity-20"
                ></circle>
                <path
                  d="M22 12a10 10 0 0 1-10 10"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="3"
                  className="opacity-80"
                ></path>
              </svg>
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
            </span>
          ) : (
            "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Plugin"
          )}
        </button>
      </div>
    </form>
  );
}
