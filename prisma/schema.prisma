generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ---------------- Domain ---------------- */
model Domain {
  id               String        @id @default(cuid())
  name             String        @unique
  note             String?
  status           DomainStatus  @default(PENDING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  expiresAt        DateTime      @default(dbgenerated("(now() + '1 year'::interval)"))
  registeredAt     DateTime      @default(now())
  activeStatus     Boolean       @default(true)
  price            Float?
  ip               String?       // ✅ เก็บ IP ที่เลือกมาจาก AllHost
  cloudflareMailId String?
  domainMailId     String?
  hostId           String?
  hostMailId       String?
  hostTypeId       String?
  redirect         Boolean       @default(false)
  teamId           String?
  wordpressInstall Boolean       @default(false)

  cloudflareMail   EmailAccount? @relation("CloudflareMail", fields: [cloudflareMailId], references: [id], onDelete: SetNull)
  domainMail       EmailAccount? @relation("DomainMail",     fields: [domainMailId],     references: [id], onDelete: SetNull)
  host             HostProvider? @relation(                   fields: [hostId],          references: [id], onDelete: SetNull)
  hostMail         EmailAccount? @relation("HostMail",       fields: [hostMailId],       references: [id], onDelete: SetNull)
  hostType         HostType?     @relation(                   fields: [hostTypeId],      references: [id], onDelete: SetNull)
  team             Team?         @relation(                   fields: [teamId],          references: [id], onDelete: SetNull)
  wordpress        Wordpress?
  
  @@index([name])
  @@index([status])
  @@index([registeredAt])
  @@index([expiresAt])
  @@index([hostId])
  @@index([hostTypeId])
  @@index([domainMailId])
  @@index([hostMailId])
  @@index([cloudflareMailId])
  @@index([teamId])
  @@index([ip])
}

model Wordpress {
  id           String   @id @default(cuid())
  domainId     String   @unique
  domain       Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)

  url          String?  @db.VarChar(512)
  user         String?  @db.VarChar(128)
  passwordHash String?  @db.VarChar(255)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([createdAt])
  @@index([url])
}

model AllHost {
  id             String       @id @default(cuid())
  title          String
  ip             String
  note           String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdOn      DateTime?

  hostProviderId String?
  hostProvider   HostProvider? @relation(fields: [hostProviderId], references: [id], onDelete: SetNull)

  emailId        String?
  email          EmailAccount? @relation(fields: [emailId], references: [id], onDelete: SetNull)

  @@index([hostProviderId])
  @@index([emailId])
  @@index([createdOn])
  @@unique([hostProviderId, ip]) // กันซ้ำ IP ต่อ Host เดียวกัน (null hostProviderId อนุญาตซ้ำได้)
}

model HostProvider {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  note      String?
  domains   Domain[]
  
  allHosts  AllHost[]
}

model EmailAccount {
  id                  String    @id @default(cuid())
  address             String    @unique
  provider            String
  note                String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  domainsAsCloudflare Domain[]  @relation("CloudflareMail")
  domainsAsDomainMail Domain[]  @relation("DomainMail")
  domainsAsHostMail   Domain[]  @relation("HostMail")
  
  allHosts            AllHost[]
}

model HostType {
  id        String   @id @default(cuid())
  name      String   @unique
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  domains   Domain[]
}

model Project {
  id        String   @id @default(cuid())
  name      String   @unique
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* ---------------- Team/Org ---------------- */
model Team {
  id             String         @id @default(cuid())
  name           String         @unique
  note           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  organizationId String?
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  domains        Domain[]
  announcements  Announcement[]

  @@index([organizationId])
}


/* ---------------- Program/Plugin ---------------- */
model Program {
  id            String   @id @default(cuid())
  name          String   @db.VarChar(200)
  version       String?  @db.VarChar(50)
  vendor        String?  @db.VarChar(120)
  category      String   @default("Misc.") @db.VarChar(50)
  content       String?
  iconUrl       String?
  fileUrl       String?
  recommended   Boolean  @default(false)
  isRecommended Boolean  @default(false)
  featured      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  slug          String?  @unique @db.VarChar(120)

  @@unique([name, version])
  @@index([category])
  @@index([vendor])
  @@index([updatedAt])
}

model Plugin {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(200)
  version     String?  @db.VarChar(50)
  vendor      String?  @db.VarChar(120)
  pluginType  String?  @db.VarChar(50)
  category    String   @default("Misc.") @db.VarChar(50)
  content     String?
  iconUrl     String?
  fileUrl     String?
  // ▼ เพิ่มเมทาดาทาไฟล์
  fileBlob    Bytes?   
  fileKey     String?  @db.VarChar(200) // คีย์ภายใน storage เช่น "plugins/abc123.zip"
  fileSize    Int?
  fileMime    String?  @db.VarChar(120)
  fileHash    String?  @db.VarChar(128) // sha256
  storage     String?  @default("local") @db.VarChar(50) // local|s3|gcs


  recommended Boolean  @default(false)
  featured    Boolean  @default(false)
  slug        String?  @unique @db.VarChar(120)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  status      PluginProcessStatus @default(QUEUED)
  processedAt DateTime?
  error       String?

  @@unique([name, version])
  @@index([category])
  @@index([vendor])
  @@index([updatedAt])
}

/* ---------------- Enums ---------------- */
enum Role {
  SYSTEM
  ADMIN
  MANAGER
  ASSISTANT_MANAGER
  STAFF
}

enum DomainStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum AnnouncementType {
  ANNOUNCE
  URGENT
  GENERAL
}

enum PluginProcessStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
}

/* ---------------- Organization ---------------- */
model Organization {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships   Membership[]
  works         Work[]
  teams         Team[]
  users         User[]          @relation("UserOrganization")
  announcements Announcement[]
}

/* ---------------- User/Auth ---------------- */
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  passwordHash    String   @map("password") // <- ใช้คอลัมน์เดิมชื่อ password
  name            String?
  role            Role     @default(STAFF)  // <- เพิ่ม role

  organizationId  String?
  organization    Organization? @relation(name: "UserOrganization", fields: [organizationId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  memberships     Membership[]
  assignedWorks   Work[]     @relation("WorkAssignedTo")

  @@index([organizationId])
}

model Membership {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  role           Role     @default(STAFF) // <- เพิ่มเพื่อแก้ P2022: column not exists
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, userId]) // กันซ้ำคนเดิมในองค์กรเดียวกัน
  @@index([userId])
  @@index([organizationId])
}

/* ---------------- Announcement/Work ---------------- */
model Announcement {
  id             String   @id @default(cuid())
  title          String
  content        String
  type           AnnouncementType @default(ANNOUNCE) // <- ใช้ enum ให้มีหมวด
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  teamId         String?
  team           Team?         @relation(fields: [teamId], references: [id])

  updatedAt      DateTime @updatedAt          // <- ลบ @default(now())
  createdAt      DateTime @default(now())

  @@index([organizationId, createdAt])
  @@index([teamId])
}

model Work {
  id              String   @id @default(cuid())
  title           String
  organizationId  String
  assignedToId    String?
  status          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  assignedTo      User?    @relation("WorkAssignedTo", fields: [assignedToId], references: [id])
  organization    Organization @relation(fields: [organizationId], references: [id])
}


// เพิ่ม model สำหรับลงชื่อเข้างานรายวัน + ช่วงพัก + บันทึกงาน
// สำหรับลงชื่อเข้างานรายวัน เบื้องต้น
enum TimeStatus {
  NONE
  WORKING
  ON_BREAK
  DONE
}

model AttendanceDay {
  id               String        @id @default(cuid())
  userId           String
  date             DateTime      @db.Date
  clockInAt        DateTime?
  clockOutAt       DateTime?
  totalWorkSeconds Int           @default(0)    // รวมเวลาทำงานของวัน (วินาที)
  totalBreakSeconds Int          @default(0)    // รวมเวลาพักของวัน (วินาที)
  status           TimeStatus    @default(NONE)
  notes            String?

  breaks           BreakInterval[]
  workLogs         WorkLog[]

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@unique([userId, date])
  @@index([userId, date])
}

model BreakInterval {
  id             String       @id @default(cuid())
  attendanceDayId String
  start          DateTime
  end            DateTime?

  attendanceDay  AttendanceDay @relation(fields: [attendanceDayId], references: [id], onDelete: Cascade)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([attendanceDayId, start])
}

model WorkLog {
  id              String        @id @default(cuid())
  attendanceDayId String
  startedAt       DateTime?
  endedAt         DateTime?
  content         String        // ข้อความสรุปสิ่งที่ทำ

  attendanceDay   AttendanceDay @relation(fields: [attendanceDayId], references: [id], onDelete: Cascade)

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([attendanceDayId, createdAt])
}